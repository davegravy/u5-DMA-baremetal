
u5-DMA-baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b88  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08000dbc  08000dbc  00010dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08000dc0  08000dc0  00010dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0001001c  20000000  08000dc4  00020000  2**2
                  ALLOC
  5 ._user_heap_stack 00000604  2001001c  08000dc4  0002001c  2**0
                  ALLOC
  6 .ARM.attributes 00000036  00000000  00000000  00010dc4  2**0
                  CONTENTS, READONLY
  7 .debug_info   00001d84  00000000  00000000  00010dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000324  00000000  00000000  00012b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 000000f8  00000000  00000000  00012ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_ranges 000000e0  00000000  00000000  00012fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  00024304  00000000  00000000  00013080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0000099a  00000000  00000000  00037384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000d5cc9  00000000  00000000  00037d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .comment      00000053  00000000  00000000  0010d9e7  2**0
                  CONTENTS, READONLY
 15 .debug_frame  0000032c  00000000  00000000  0010da3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000000 	.word	0x20000000
 8000250:	00000000 	.word	0x00000000
 8000254:	08000da4 	.word	0x08000da4

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000004 	.word	0x20000004
 8000270:	08000da4 	.word	0x08000da4

08000274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <__NVIC_GetPriorityGrouping+0x18>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	0a1b      	lsrs	r3, r3, #8
 800027e:	f003 0307 	and.w	r3, r3, #7
}
 8000282:	4618      	mov	r0, r3
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	e000ed00 	.word	0xe000ed00

08000290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db0b      	blt.n	80002ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 021f 	and.w	r2, r3, #31
 80002a8:	4907      	ldr	r1, [pc, #28]	; (80002c8 <__NVIC_EnableIRQ+0x38>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	2001      	movs	r0, #1
 80002b2:	fa00 f202 	lsl.w	r2, r0, r2
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e100 	.word	0xe000e100

080002cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	6039      	str	r1, [r7, #0]
 80002d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	db0a      	blt.n	80002f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	490c      	ldr	r1, [pc, #48]	; (8000318 <__NVIC_SetPriority+0x4c>)
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	0112      	lsls	r2, r2, #4
 80002ec:	b2d2      	uxtb	r2, r2
 80002ee:	440b      	add	r3, r1
 80002f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f4:	e00a      	b.n	800030c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4908      	ldr	r1, [pc, #32]	; (800031c <__NVIC_SetPriority+0x50>)
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	3b04      	subs	r3, #4
 8000304:	0112      	lsls	r2, r2, #4
 8000306:	b2d2      	uxtb	r2, r2
 8000308:	440b      	add	r3, r1
 800030a:	761a      	strb	r2, [r3, #24]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	e000e100 	.word	0xe000e100
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000320:	b480      	push	{r7}
 8000322:	b089      	sub	sp, #36	; 0x24
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f003 0307 	and.w	r3, r3, #7
 8000332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000334:	69fb      	ldr	r3, [r7, #28]
 8000336:	f1c3 0307 	rsb	r3, r3, #7
 800033a:	2b04      	cmp	r3, #4
 800033c:	bf28      	it	cs
 800033e:	2304      	movcs	r3, #4
 8000340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000342:	69fb      	ldr	r3, [r7, #28]
 8000344:	3304      	adds	r3, #4
 8000346:	2b06      	cmp	r3, #6
 8000348:	d902      	bls.n	8000350 <NVIC_EncodePriority+0x30>
 800034a:	69fb      	ldr	r3, [r7, #28]
 800034c:	3b03      	subs	r3, #3
 800034e:	e000      	b.n	8000352 <NVIC_EncodePriority+0x32>
 8000350:	2300      	movs	r3, #0
 8000352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000354:	f04f 32ff 	mov.w	r2, #4294967295
 8000358:	69bb      	ldr	r3, [r7, #24]
 800035a:	fa02 f303 	lsl.w	r3, r2, r3
 800035e:	43da      	mvns	r2, r3
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	401a      	ands	r2, r3
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000368:	f04f 31ff 	mov.w	r1, #4294967295
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	fa01 f303 	lsl.w	r3, r1, r3
 8000372:	43d9      	mvns	r1, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	4313      	orrs	r3, r2
         );
}
 800037a:	4618      	mov	r0, r3
 800037c:	3724      	adds	r7, #36	; 0x24
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
	...

08000388 <system_clk_init>:

uint8_t RxBuffer[Size*4];
uint8_t RxBytesRemaining;

void system_clk_init()
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

	//set flash prefetch
	SET_BIT(FLASH->ACR, FLASH_ACR_PRFTEN);
 800038c:	4b7e      	ldr	r3, [pc, #504]	; (8000588 <system_clk_init+0x200>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a7d      	ldr	r2, [pc, #500]	; (8000588 <system_clk_init+0x200>)
 8000392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000396:	6013      	str	r3, [r2, #0]

	//enable PWR CLK
	SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_PWREN);
 8000398:	4b7c      	ldr	r3, [pc, #496]	; (800058c <system_clk_init+0x204>)
 800039a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800039e:	4a7b      	ldr	r2, [pc, #492]	; (800058c <system_clk_init+0x204>)
 80003a0:	f043 0304 	orr.w	r3, r3, #4
 80003a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

	//Set power scaling (for high clock)
	MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), ((PWR_VOSR_VOS_0 | PWR_VOSR_VOS_1) | PWR_VOSR_BOOSTEN));
 80003a8:	4b79      	ldr	r3, [pc, #484]	; (8000590 <system_clk_init+0x208>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	4a78      	ldr	r2, [pc, #480]	; (8000590 <system_clk_init+0x208>)
 80003ae:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80003b2:	60d3      	str	r3, [r2, #12]

	//disable PWR CLK
	CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_PWREN);
 80003b4:	4b75      	ldr	r3, [pc, #468]	; (800058c <system_clk_init+0x204>)
 80003b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80003ba:	4a74      	ldr	r2, [pc, #464]	; (800058c <system_clk_init+0x204>)
 80003bc:	f023 0304 	bic.w	r3, r3, #4
 80003c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

	//enable MSI
	SET_BIT(RCC->CR, RCC_CR_MSISON);
 80003c4:	4b71      	ldr	r3, [pc, #452]	; (800058c <system_clk_init+0x204>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a70      	ldr	r2, [pc, #448]	; (800058c <system_clk_init+0x204>)
 80003ca:	f043 0301 	orr.w	r3, r3, #1
 80003ce:	6013      	str	r3, [r2, #0]
	while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U){
 80003d0:	bf00      	nop
 80003d2:	4b6e      	ldr	r3, [pc, #440]	; (800058c <system_clk_init+0x204>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f003 0304 	and.w	r3, r3, #4
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0f9      	beq.n	80003d2 <system_clk_init+0x4a>
	}

	//Set MSI range and calibration
	SET_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL);
 80003de:	4b6b      	ldr	r3, [pc, #428]	; (800058c <system_clk_init+0x204>)
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	4a6a      	ldr	r2, [pc, #424]	; (800058c <system_clk_init+0x204>)
 80003e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003e8:	6093      	str	r3, [r2, #8]
	MODIFY_REG(RCC->ICSCR1, RCC_ICSCR1_MSISRANGE, (RCC_ICSCR1_MSISRANGE_2));
 80003ea:	4b68      	ldr	r3, [pc, #416]	; (800058c <system_clk_init+0x204>)
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80003f2:	4a66      	ldr	r2, [pc, #408]	; (800058c <system_clk_init+0x204>)
 80003f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80003f8:	6093      	str	r3, [r2, #8]
	MODIFY_REG((RCC->ICSCR2), (RCC_ICSCR2_MSITRIM1), ((uint32_t)(0x10U)<<\
 80003fa:	4b64      	ldr	r3, [pc, #400]	; (800058c <system_clk_init+0x204>)
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8000402:	4a62      	ldr	r2, [pc, #392]	; (800058c <system_clk_init+0x204>)
 8000404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000408:	60d3      	str	r3, [r2, #12]
	                                                        RCC_ICSCR2_MSITRIM1_Pos));
	//set flash latency
	//MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (FLASH_ACR_LATENCY_0WS));
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (FLASH_ACR_LATENCY_4WS));
 800040a:	4b5f      	ldr	r3, [pc, #380]	; (8000588 <system_clk_init+0x200>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f023 030f 	bic.w	r3, r3, #15
 8000412:	4a5d      	ldr	r2, [pc, #372]	; (8000588 <system_clk_init+0x200>)
 8000414:	f043 0304 	orr.w	r3, r3, #4
 8000418:	6013      	str	r3, [r2, #0]

	//SysTick stuff skipped

	//disable PLL1
	CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 800041a:	4b5c      	ldr	r3, [pc, #368]	; (800058c <system_clk_init+0x204>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a5b      	ldr	r2, [pc, #364]	; (800058c <system_clk_init+0x204>)
 8000420:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000424:	6013      	str	r3, [r2, #0]
	while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8000426:	bf00      	nop
 8000428:	4b58      	ldr	r3, [pc, #352]	; (800058c <system_clk_init+0x204>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000430:	2b00      	cmp	r3, #0
 8000432:	d1f9      	bne.n	8000428 <system_clk_init+0xa0>
	//
	// PLL
	//

	//enable PWR CLK
	SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_PWREN);
 8000434:	4b55      	ldr	r3, [pc, #340]	; (800058c <system_clk_init+0x204>)
 8000436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800043a:	4a54      	ldr	r2, [pc, #336]	; (800058c <system_clk_init+0x204>)
 800043c:	f043 0304 	orr.w	r3, r3, #4
 8000440:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

	CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8000444:	4b52      	ldr	r3, [pc, #328]	; (8000590 <system_clk_init+0x208>)
 8000446:	68db      	ldr	r3, [r3, #12]
 8000448:	4a51      	ldr	r2, [pc, #324]	; (8000590 <system_clk_init+0x208>)
 800044a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800044e:	60d3      	str	r3, [r2, #12]
	MODIFY_REG(RCC->PLL1CFGR,(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1M|\
 8000450:	4b4e      	ldr	r3, [pc, #312]	; (800058c <system_clk_init+0x204>)
 8000452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000454:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000458:	f023 0303 	bic.w	r3, r3, #3
 800045c:	4a4b      	ldr	r2, [pc, #300]	; (800058c <system_clk_init+0x204>)
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	6293      	str	r3, [r2, #40]	; 0x28
	                                  RCC_PLL1CFGR_PLL1MBOOST), ((RCC_PLL1CFGR_PLL1SRC_0) << RCC_PLL1CFGR_PLL1SRC_Pos) |\
	                   (((1) - 1U) << RCC_PLL1CFGR_PLL1M_Pos) | (0x00000000U));

	MODIFY_REG(RCC->PLL1DIVR ,(RCC_PLL1DIVR_PLL1N | RCC_PLL1DIVR_PLL1P | RCC_PLL1DIVR_PLL1Q |\
 8000464:	4b49      	ldr	r3, [pc, #292]	; (800058c <system_clk_init+0x204>)
 8000466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000468:	4a4a      	ldr	r2, [pc, #296]	; (8000594 <system_clk_init+0x20c>)
 800046a:	401a      	ands	r2, r3
 800046c:	4947      	ldr	r1, [pc, #284]	; (800058c <system_clk_init+0x204>)
 800046e:	4b4a      	ldr	r3, [pc, #296]	; (8000598 <system_clk_init+0x210>)
 8000470:	4313      	orrs	r3, r2
 8000472:	634b      	str	r3, [r1, #52]	; 0x34
	                                                      ((((2) -1U) << RCC_PLL1DIVR_PLL1Q_Pos) & \
	                                                       RCC_PLL1DIVR_PLL1Q) |\
	                                                      ((((2)- 1U) << RCC_PLL1DIVR_PLL1R_Pos) & \
	                                                       RCC_PLL1DIVR_PLL1R)));
	//Disable PLL1 fractional divider
	CLEAR_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1FRACEN);
 8000474:	4b45      	ldr	r3, [pc, #276]	; (800058c <system_clk_init+0x204>)
 8000476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000478:	4a44      	ldr	r2, [pc, #272]	; (800058c <system_clk_init+0x204>)
 800047a:	f023 0310 	bic.w	r3, r3, #16
 800047e:	6293      	str	r3, [r2, #40]	; 0x28

	//change PLL1 fractional divider
	MODIFY_REG(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN,\
 8000480:	4b42      	ldr	r3, [pc, #264]	; (800058c <system_clk_init+0x204>)
 8000482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000484:	4a41      	ldr	r2, [pc, #260]	; (800058c <system_clk_init+0x204>)
 8000486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800048a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800048e:	6393      	str	r3, [r2, #56]	; 0x38
	                                                    (uint32_t)(0) << \
	                                                    RCC_PLL1FRACR_PLL1FRACN_Pos);
	//Enable PLL1 fractional divider
	SET_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1FRACEN);
 8000490:	4b3e      	ldr	r3, [pc, #248]	; (800058c <system_clk_init+0x204>)
 8000492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000494:	4a3d      	ldr	r2, [pc, #244]	; (800058c <system_clk_init+0x204>)
 8000496:	f043 0310 	orr.w	r3, r3, #16
 800049a:	6293      	str	r3, [r2, #40]	; 0x28

	//Select reference frequency range VCI
	MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RGE, (0x00000000U));
 800049c:	4b3b      	ldr	r3, [pc, #236]	; (800058c <system_clk_init+0x204>)
 800049e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004a0:	4a3a      	ldr	r2, [pc, #232]	; (800058c <system_clk_init+0x204>)
 80004a2:	f023 030c 	bic.w	r3, r3, #12
 80004a6:	6293      	str	r3, [r2, #40]	; 0x28

	/* Enable the EPOD to reach max frequency */
	SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80004a8:	4b39      	ldr	r3, [pc, #228]	; (8000590 <system_clk_init+0x208>)
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	4a38      	ldr	r2, [pc, #224]	; (8000590 <system_clk_init+0x208>)
 80004ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004b2:	60d3      	str	r3, [r2, #12]

	//Disable PWR CLK
	CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_PWREN);
 80004b4:	4b35      	ldr	r3, [pc, #212]	; (800058c <system_clk_init+0x204>)
 80004b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004ba:	4a34      	ldr	r2, [pc, #208]	; (800058c <system_clk_init+0x204>)
 80004bc:	f023 0304 	bic.w	r3, r3, #4
 80004c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

	//Enable PLL1 system clock output
	SET_BIT(RCC->PLL1CFGR, (RCC_PLL1CFGR_PLL1REN));
 80004c4:	4b31      	ldr	r3, [pc, #196]	; (800058c <system_clk_init+0x204>)
 80004c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004c8:	4a30      	ldr	r2, [pc, #192]	; (800058c <system_clk_init+0x204>)
 80004ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004ce:	6293      	str	r3, [r2, #40]	; 0x28

	//Enable PLL1
	SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 80004d0:	4b2e      	ldr	r3, [pc, #184]	; (800058c <system_clk_init+0x204>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a2d      	ldr	r2, [pc, #180]	; (800058c <system_clk_init+0x204>)
 80004d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004da:	6013      	str	r3, [r2, #0]

	while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80004dc:	bf00      	nop
 80004de:	4b2b      	ldr	r3, [pc, #172]	; (800058c <system_clk_init+0x204>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0f9      	beq.n	80004de <system_clk_init+0x156>
	//
	//Peripheral Clocks
	//

	//enable PWR CLK
	SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_PWREN);
 80004ea:	4b28      	ldr	r3, [pc, #160]	; (800058c <system_clk_init+0x204>)
 80004ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004f0:	4a26      	ldr	r2, [pc, #152]	; (800058c <system_clk_init+0x204>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

	if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80004fa:	4b25      	ldr	r3, [pc, #148]	; (8000590 <system_clk_init+0x208>)
 80004fc:	68db      	ldr	r3, [r3, #12]
 80004fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000502:	2b00      	cmp	r3, #0
 8000504:	d006      	beq.n	8000514 <system_clk_init+0x18c>
	      {
			while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8000506:	bf00      	nop
 8000508:	4b21      	ldr	r3, [pc, #132]	; (8000590 <system_clk_init+0x208>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0f9      	beq.n	8000508 <system_clk_init+0x180>
				{}
	      }

	//disable PWR CLK
	CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_PWREN);
 8000514:	4b1d      	ldr	r3, [pc, #116]	; (800058c <system_clk_init+0x204>)
 8000516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800051a:	4a1c      	ldr	r2, [pc, #112]	; (800058c <system_clk_init+0x204>)
 800051c:	f023 0304 	bic.w	r3, r3, #4
 8000520:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

	//wait for PLL ready
	while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8000524:	bf00      	nop
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <system_clk_init+0x204>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800052e:	2b00      	cmp	r3, #0
 8000530:	d0f9      	beq.n	8000526 <system_clk_init+0x19e>
	{}

	//Set SysCLK source
	MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, (RCC_CFGR1_SW_0 | RCC_CFGR1_SW_1));
 8000532:	4b16      	ldr	r3, [pc, #88]	; (800058c <system_clk_init+0x204>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a15      	ldr	r2, [pc, #84]	; (800058c <system_clk_init+0x204>)
 8000538:	f043 0303 	orr.w	r3, r3, #3
 800053c:	61d3      	str	r3, [r2, #28]

	//Wait until source is confirmed updated
	while (((uint32_t)(RCC->CFGR1 & RCC_CFGR1_SWS)) != (RCC_CFGR1_SWS_0 | RCC_CFGR1_SWS_1))
 800053e:	bf00      	nop
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <system_clk_init+0x204>)
 8000542:	69db      	ldr	r3, [r3, #28]
 8000544:	f003 030c 	and.w	r3, r3, #12
 8000548:	2b0c      	cmp	r3, #12
 800054a:	d1f9      	bne.n	8000540 <system_clk_init+0x1b8>
	      {}

	//Set AHBCLK Divider
	MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, 0x00000000U);
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <system_clk_init+0x204>)
 800054e:	6a1b      	ldr	r3, [r3, #32]
 8000550:	4a0e      	ldr	r2, [pc, #56]	; (800058c <system_clk_init+0x204>)
 8000552:	f023 030f 	bic.w	r3, r3, #15
 8000556:	6213      	str	r3, [r2, #32]

	//Set APB1CLK Divider
	MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (0x00000000U));
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <system_clk_init+0x204>)
 800055a:	6a1b      	ldr	r3, [r3, #32]
 800055c:	4a0b      	ldr	r2, [pc, #44]	; (800058c <system_clk_init+0x204>)
 800055e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000562:	6213      	str	r3, [r2, #32]

	//Set APB2CLK Divider
	MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (((0x00000000U)) << 4));
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <system_clk_init+0x204>)
 8000566:	6a1b      	ldr	r3, [r3, #32]
 8000568:	4a08      	ldr	r2, [pc, #32]	; (800058c <system_clk_init+0x204>)
 800056a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800056e:	6213      	str	r3, [r2, #32]

	//Set APB3CLK Divider
    MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (0x00000000U));
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <system_clk_init+0x204>)
 8000572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000574:	4a05      	ldr	r2, [pc, #20]	; (800058c <system_clk_init+0x204>)
 8000576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800057a:	6253      	str	r3, [r2, #36]	; 0x24

}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40022000 	.word	0x40022000
 800058c:	46020c00 	.word	0x46020c00
 8000590:	46020800 	.word	0x46020800
 8000594:	80800000 	.word	0x80800000
 8000598:	0101024f 	.word	0x0101024f

0800059c <GPIO_SetMODER>:
    GPIO_MODER_ALTERNATE = 0b10,
    GPIO_MODER_ANALOG   = 0b11,
}GPIO_MODER;

void GPIO_SetMODER(GPIO_TypeDef *gpio, int pin, GPIO_MODER mode)
{
 800059c:	b480      	push	{r7}
 800059e:	b087      	sub	sp, #28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4613      	mov	r3, r2
 80005a8:	71fb      	strb	r3, [r7, #7]
    uint32_t reg = gpio -> MODER;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	617b      	str	r3, [r7, #20]

    reg &= ~(0b11 << (pin * 2));
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	2203      	movs	r2, #3
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	43db      	mvns	r3, r3
 80005bc:	461a      	mov	r2, r3
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	4013      	ands	r3, r2
 80005c2:	617b      	str	r3, [r7, #20]
    reg |= (mode & 0b11) << (pin * 2);
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	f003 0203 	and.w	r2, r3, #3
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	461a      	mov	r2, r3
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	617b      	str	r3, [r7, #20]

    gpio -> MODER = reg;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	601a      	str	r2, [r3, #0]
}
 80005e0:	bf00      	nop
 80005e2:	371c      	adds	r7, #28
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <GPIO_SetOSPEEDR>:
	GPIO_OSPEEDR_HIGH = 0b10,
	GPIO_OSPEEDR_VERY_HIGH = 0b11,
}GPIO_OSPEEDR;

void GPIO_SetOSPEEDR(GPIO_TypeDef *gpio, int pin, GPIO_OSPEEDR ospeed)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b087      	sub	sp, #28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	4613      	mov	r3, r2
 80005f8:	71fb      	strb	r3, [r7, #7]
    uint32_t reg = gpio -> OSPEEDR;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	617b      	str	r3, [r7, #20]

    reg &= ~(0b11 << (pin * 2));
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	2203      	movs	r2, #3
 8000606:	fa02 f303 	lsl.w	r3, r2, r3
 800060a:	43db      	mvns	r3, r3
 800060c:	461a      	mov	r2, r3
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	4013      	ands	r3, r2
 8000612:	617b      	str	r3, [r7, #20]
    reg |= (ospeed & 0b11) << (pin * 2);
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	f003 0203 	and.w	r2, r3, #3
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	461a      	mov	r2, r3
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	4313      	orrs	r3, r2
 8000628:	617b      	str	r3, [r7, #20]

    gpio -> OSPEEDR = reg;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	609a      	str	r2, [r3, #8]
}
 8000630:	bf00      	nop
 8000632:	371c      	adds	r7, #28
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <GPIO_init>:

void GPIO_init() {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

	//Enable GPIOx clocks
		SET_BIT(RCC->AHB2ENR1, RCC_AHB2ENR1_GPIOAEN);
 8000640:	4b70      	ldr	r3, [pc, #448]	; (8000804 <GPIO_init+0x1c8>)
 8000642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000646:	4a6f      	ldr	r2, [pc, #444]	; (8000804 <GPIO_init+0x1c8>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		SET_BIT(RCC->AHB2ENR1, RCC_AHB2ENR1_GPIOBEN);
 8000650:	4b6c      	ldr	r3, [pc, #432]	; (8000804 <GPIO_init+0x1c8>)
 8000652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000656:	4a6b      	ldr	r2, [pc, #428]	; (8000804 <GPIO_init+0x1c8>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		SET_BIT(RCC->AHB2ENR1, RCC_AHB2ENR1_GPIOCEN);
 8000660:	4b68      	ldr	r3, [pc, #416]	; (8000804 <GPIO_init+0x1c8>)
 8000662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000666:	4a67      	ldr	r2, [pc, #412]	; (8000804 <GPIO_init+0x1c8>)
 8000668:	f043 0304 	orr.w	r3, r3, #4
 800066c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		SET_BIT(RCC->AHB2ENR1, RCC_AHB2ENR1_GPIOEEN);
 8000670:	4b64      	ldr	r3, [pc, #400]	; (8000804 <GPIO_init+0x1c8>)
 8000672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000676:	4a63      	ldr	r2, [pc, #396]	; (8000804 <GPIO_init+0x1c8>)
 8000678:	f043 0310 	orr.w	r3, r3, #16
 800067c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


		GPIO_SetMODER(GPIOA, 5, GPIO_MODER_ALTERNATE); //SPI1_SCK
 8000680:	2202      	movs	r2, #2
 8000682:	2105      	movs	r1, #5
 8000684:	4860      	ldr	r0, [pc, #384]	; (8000808 <GPIO_init+0x1cc>)
 8000686:	f7ff ff89 	bl	800059c <GPIO_SetMODER>
		GPIO_SetOSPEEDR(GPIOA, 5, GPIO_OSPEEDR_VERY_HIGH);
 800068a:	2203      	movs	r2, #3
 800068c:	2105      	movs	r1, #5
 800068e:	485e      	ldr	r0, [pc, #376]	; (8000808 <GPIO_init+0x1cc>)
 8000690:	f7ff ffac 	bl	80005ec <GPIO_SetOSPEEDR>
		MODIFY_REG(GPIOA->PUPDR, (0b11) << 5U * 2, (0b00) << 5U * 2 ); // set no-pull-down
 8000694:	4b5c      	ldr	r3, [pc, #368]	; (8000808 <GPIO_init+0x1cc>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	4a5b      	ldr	r2, [pc, #364]	; (8000808 <GPIO_init+0x1cc>)
 800069a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800069e:	60d3      	str	r3, [r2, #12]
		MODIFY_REG(GPIOA->AFR[0], 0b111 << 5*4, 0b0101 << 5*4);
 80006a0:	4b59      	ldr	r3, [pc, #356]	; (8000808 <GPIO_init+0x1cc>)
 80006a2:	6a1b      	ldr	r3, [r3, #32]
 80006a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80006a8:	4a57      	ldr	r2, [pc, #348]	; (8000808 <GPIO_init+0x1cc>)
 80006aa:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80006ae:	6213      	str	r3, [r2, #32]


		GPIO_SetMODER(GPIOA, 6, GPIO_MODER_ALTERNATE); //SPI1_MISO
 80006b0:	2202      	movs	r2, #2
 80006b2:	2106      	movs	r1, #6
 80006b4:	4854      	ldr	r0, [pc, #336]	; (8000808 <GPIO_init+0x1cc>)
 80006b6:	f7ff ff71 	bl	800059c <GPIO_SetMODER>
		GPIO_SetOSPEEDR(GPIOA, 6, GPIO_OSPEEDR_VERY_HIGH);
 80006ba:	2203      	movs	r2, #3
 80006bc:	2106      	movs	r1, #6
 80006be:	4852      	ldr	r0, [pc, #328]	; (8000808 <GPIO_init+0x1cc>)
 80006c0:	f7ff ff94 	bl	80005ec <GPIO_SetOSPEEDR>
		MODIFY_REG(GPIOA->AFR[0], 0b111 << 6*4, 0b0101 << 6*4);
 80006c4:	4b50      	ldr	r3, [pc, #320]	; (8000808 <GPIO_init+0x1cc>)
 80006c6:	6a1b      	ldr	r3, [r3, #32]
 80006c8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006cc:	4a4e      	ldr	r2, [pc, #312]	; (8000808 <GPIO_init+0x1cc>)
 80006ce:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 80006d2:	6213      	str	r3, [r2, #32]

		GPIO_SetMODER(GPIOA, 7, GPIO_MODER_ALTERNATE); //SPI1_MOSI
 80006d4:	2202      	movs	r2, #2
 80006d6:	2107      	movs	r1, #7
 80006d8:	484b      	ldr	r0, [pc, #300]	; (8000808 <GPIO_init+0x1cc>)
 80006da:	f7ff ff5f 	bl	800059c <GPIO_SetMODER>
		GPIO_SetOSPEEDR(GPIOA, 7, GPIO_OSPEEDR_VERY_HIGH);
 80006de:	2203      	movs	r2, #3
 80006e0:	2107      	movs	r1, #7
 80006e2:	4849      	ldr	r0, [pc, #292]	; (8000808 <GPIO_init+0x1cc>)
 80006e4:	f7ff ff82 	bl	80005ec <GPIO_SetOSPEEDR>


		GPIO_SetMODER(GPIOB, 2, GPIO_MODER_ALTERNATE); //SPI1_RDY
 80006e8:	2202      	movs	r2, #2
 80006ea:	2102      	movs	r1, #2
 80006ec:	4847      	ldr	r0, [pc, #284]	; (800080c <GPIO_init+0x1d0>)
 80006ee:	f7ff ff55 	bl	800059c <GPIO_SetMODER>
		GPIO_SetOSPEEDR(GPIOB, 2, GPIO_OSPEEDR_VERY_HIGH); //SPI1_RDY
 80006f2:	2203      	movs	r2, #3
 80006f4:	2102      	movs	r1, #2
 80006f6:	4845      	ldr	r0, [pc, #276]	; (800080c <GPIO_init+0x1d0>)
 80006f8:	f7ff ff78 	bl	80005ec <GPIO_SetOSPEEDR>
		MODIFY_REG(GPIOB->AFR[0], 0b1111 << 2*4, 0b0101 << 2*4);
 80006fc:	4b43      	ldr	r3, [pc, #268]	; (800080c <GPIO_init+0x1d0>)
 80006fe:	6a1b      	ldr	r3, [r3, #32]
 8000700:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000704:	4a41      	ldr	r2, [pc, #260]	; (800080c <GPIO_init+0x1d0>)
 8000706:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800070a:	6213      	str	r3, [r2, #32]
		GPIO_SetMODER(GPIOA, 4, GPIO_MODER_INPUT); //DRL
		SET_BIT(EXTI->FTSR1, (0b1 << 4)); //falling edge trigger
		SET_BIT(EXTI->IMR1, (0b1 << 4)); //add interrupt mask
*/

		GPIO_SetMODER(GPIOA, 2, GPIO_MODER_OUTPUT); //SEL1
 800070c:	2201      	movs	r2, #1
 800070e:	2102      	movs	r1, #2
 8000710:	483d      	ldr	r0, [pc, #244]	; (8000808 <GPIO_init+0x1cc>)
 8000712:	f7ff ff43 	bl	800059c <GPIO_SetMODER>
		GPIO_SetOSPEEDR(GPIOA, 2, GPIO_OSPEEDR_LOW);
 8000716:	2200      	movs	r2, #0
 8000718:	2102      	movs	r1, #2
 800071a:	483b      	ldr	r0, [pc, #236]	; (8000808 <GPIO_init+0x1cc>)
 800071c:	f7ff ff66 	bl	80005ec <GPIO_SetOSPEEDR>

		GPIO_SetMODER(GPIOA, 3, GPIO_MODER_OUTPUT); //SEL0
 8000720:	2201      	movs	r2, #1
 8000722:	2103      	movs	r1, #3
 8000724:	4838      	ldr	r0, [pc, #224]	; (8000808 <GPIO_init+0x1cc>)
 8000726:	f7ff ff39 	bl	800059c <GPIO_SetMODER>
		GPIO_SetOSPEEDR(GPIOA, 3, GPIO_OSPEEDR_LOW);
 800072a:	2200      	movs	r2, #0
 800072c:	2103      	movs	r1, #3
 800072e:	4836      	ldr	r0, [pc, #216]	; (8000808 <GPIO_init+0x1cc>)
 8000730:	f7ff ff5c 	bl	80005ec <GPIO_SetOSPEEDR>

		GPIO_SetMODER(GPIOB, 0, GPIO_MODER_OUTPUT); //RDLB
 8000734:	2201      	movs	r2, #1
 8000736:	2100      	movs	r1, #0
 8000738:	4834      	ldr	r0, [pc, #208]	; (800080c <GPIO_init+0x1d0>)
 800073a:	f7ff ff2f 	bl	800059c <GPIO_SetMODER>
		GPIO_SetOSPEEDR(GPIOB, 0, GPIO_OSPEEDR_LOW);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	4832      	ldr	r0, [pc, #200]	; (800080c <GPIO_init+0x1d0>)
 8000744:	f7ff ff52 	bl	80005ec <GPIO_SetOSPEEDR>

		GPIO_SetMODER(GPIOC, 3, GPIO_MODER_OUTPUT); //RDLA
 8000748:	2201      	movs	r2, #1
 800074a:	2103      	movs	r1, #3
 800074c:	4830      	ldr	r0, [pc, #192]	; (8000810 <GPIO_init+0x1d4>)
 800074e:	f7ff ff25 	bl	800059c <GPIO_SetMODER>
		GPIO_SetOSPEEDR(GPIOB, 3, GPIO_OSPEEDR_LOW);
 8000752:	2200      	movs	r2, #0
 8000754:	2103      	movs	r1, #3
 8000756:	482d      	ldr	r0, [pc, #180]	; (800080c <GPIO_init+0x1d0>)
 8000758:	f7ff ff48 	bl	80005ec <GPIO_SetOSPEEDR>

		GPIO_SetMODER(GPIOE, 2, GPIO_MODER_ALTERNATE); //TIM3_ETR
 800075c:	2202      	movs	r2, #2
 800075e:	2102      	movs	r1, #2
 8000760:	482c      	ldr	r0, [pc, #176]	; (8000814 <GPIO_init+0x1d8>)
 8000762:	f7ff ff1b 	bl	800059c <GPIO_SetMODER>
		GPIO_SetOSPEEDR(GPIOE, 2, GPIO_OSPEEDR_VERY_HIGH);
 8000766:	2203      	movs	r2, #3
 8000768:	2102      	movs	r1, #2
 800076a:	482a      	ldr	r0, [pc, #168]	; (8000814 <GPIO_init+0x1d8>)
 800076c:	f7ff ff3e 	bl	80005ec <GPIO_SetOSPEEDR>

		GPIO_SetMODER(GPIOE, 3, GPIO_MODER_ALTERNATE); //TIM3_CH1
 8000770:	2202      	movs	r2, #2
 8000772:	2103      	movs	r1, #3
 8000774:	4827      	ldr	r0, [pc, #156]	; (8000814 <GPIO_init+0x1d8>)
 8000776:	f7ff ff11 	bl	800059c <GPIO_SetMODER>
		GPIO_SetOSPEEDR(GPIOE, 3, GPIO_OSPEEDR_VERY_HIGH);
 800077a:	2203      	movs	r2, #3
 800077c:	2103      	movs	r1, #3
 800077e:	4825      	ldr	r0, [pc, #148]	; (8000814 <GPIO_init+0x1d8>)
 8000780:	f7ff ff34 	bl	80005ec <GPIO_SetOSPEEDR>

		WRITE_REG(GPIOA->BSRR, (0b1 << 2) | (0b1 << 3) ); //SEL1, SEL0 high
 8000784:	4b20      	ldr	r3, [pc, #128]	; (8000808 <GPIO_init+0x1cc>)
 8000786:	220c      	movs	r2, #12
 8000788:	619a      	str	r2, [r3, #24]
		WRITE_REG(GPIOB->BSRR, (0b1 << 0)); //RDLB high
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <GPIO_init+0x1d0>)
 800078c:	2201      	movs	r2, #1
 800078e:	619a      	str	r2, [r3, #24]
		WRITE_REG(GPIOC->BSRR, (0b0 << 3)); //RDLA low
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <GPIO_init+0x1d4>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]

		GPIO_SetMODER(GPIOA, 9, GPIO_MODER_ALTERNATE); //USUART TX
 8000796:	2202      	movs	r2, #2
 8000798:	2109      	movs	r1, #9
 800079a:	481b      	ldr	r0, [pc, #108]	; (8000808 <GPIO_init+0x1cc>)
 800079c:	f7ff fefe 	bl	800059c <GPIO_SetMODER>
		GPIO_SetOSPEEDR(GPIOA, 9, GPIO_OSPEEDR_VERY_HIGH);
 80007a0:	2203      	movs	r2, #3
 80007a2:	2109      	movs	r1, #9
 80007a4:	4818      	ldr	r0, [pc, #96]	; (8000808 <GPIO_init+0x1cc>)
 80007a6:	f7ff ff21 	bl	80005ec <GPIO_SetOSPEEDR>
		MODIFY_REG(GPIOA->AFR[1], 0b1111 << 1*4, 0b0111 << 1*4);
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <GPIO_init+0x1cc>)
 80007ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <GPIO_init+0x1cc>)
 80007b4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80007b8:	6253      	str	r3, [r2, #36]	; 0x24
		MODIFY_REG(GPIOA->PUPDR, (0b11) << 9U * 2, (0b10) << 9U * 2 ); // set pull-down
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <GPIO_init+0x1cc>)
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80007c2:	4a11      	ldr	r2, [pc, #68]	; (8000808 <GPIO_init+0x1cc>)
 80007c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007c8:	60d3      	str	r3, [r2, #12]

		GPIO_SetMODER(GPIOA, 10, GPIO_MODER_ALTERNATE); //USUART RX
 80007ca:	2202      	movs	r2, #2
 80007cc:	210a      	movs	r1, #10
 80007ce:	480e      	ldr	r0, [pc, #56]	; (8000808 <GPIO_init+0x1cc>)
 80007d0:	f7ff fee4 	bl	800059c <GPIO_SetMODER>
		GPIO_SetOSPEEDR(GPIOA, 10, GPIO_OSPEEDR_VERY_HIGH);
 80007d4:	2203      	movs	r2, #3
 80007d6:	210a      	movs	r1, #10
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <GPIO_init+0x1cc>)
 80007da:	f7ff ff07 	bl	80005ec <GPIO_SetOSPEEDR>
		MODIFY_REG(GPIOA->AFR[1], 0b1111 << 2*4, 0b0111 << 2*4);
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <GPIO_init+0x1cc>)
 80007e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <GPIO_init+0x1cc>)
 80007e8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80007ec:	6253      	str	r3, [r2, #36]	; 0x24
		MODIFY_REG(GPIOA->PUPDR, (0b11) << 10U * 2, (0b10) << 10U * 2 ); // set pull-down
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <GPIO_init+0x1cc>)
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80007f6:	4a04      	ldr	r2, [pc, #16]	; (8000808 <GPIO_init+0x1cc>)
 80007f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007fc:	60d3      	str	r3, [r2, #12]

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	46020c00 	.word	0x46020c00
 8000808:	42020000 	.word	0x42020000
 800080c:	42020400 	.word	0x42020400
 8000810:	42020800 	.word	0x42020800
 8000814:	42021000 	.word	0x42021000

08000818 <TIM3_init>:

void TIM3_init() {
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

	SET_BIT(RCC->APB1ENR1, RCC_APB1ENR1_TIM3EN);
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <TIM3_init+0x68>)
 800081e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000822:	4a17      	ldr	r2, [pc, #92]	; (8000880 <TIM3_init+0x68>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

	MODIFY_REG(GPIOE->AFR[0], 0b1111 << 2*4, 0b0010 << 2*4);
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <TIM3_init+0x6c>)
 800082e:	6a1b      	ldr	r3, [r3, #32]
 8000830:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000834:	4a13      	ldr	r2, [pc, #76]	; (8000884 <TIM3_init+0x6c>)
 8000836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800083a:	6213      	str	r3, [r2, #32]
	MODIFY_REG(GPIOE->AFR[0], 0b1111 << 3*4, 0b0010 << 3*4);
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <TIM3_init+0x6c>)
 800083e:	6a1b      	ldr	r3, [r3, #32]
 8000840:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000844:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <TIM3_init+0x6c>)
 8000846:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800084a:	6213      	str	r3, [r2, #32]

	WRITE_REG(TIM3->ARR, (uint32_t) 190U); //set period
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <TIM3_init+0x70>)
 800084e:	22be      	movs	r2, #190	; 0xbe
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Generate an update event to reload the Prescaler
	     and the repetition counter (only for advanced timer) value immediately */
	WRITE_REG(TIM3->EGR, TIM_EGR_UG);
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <TIM3_init+0x70>)
 8000854:	2201      	movs	r2, #1
 8000856:	615a      	str	r2, [r3, #20]

	WRITE_REG(TIM3->CR1, 0x8); //set one-pulse-mode
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <TIM3_init+0x70>)
 800085a:	2208      	movs	r2, #8
 800085c:	601a      	str	r2, [r3, #0]
	WRITE_REG(TIM3->SMCR, 0x76); //set slave-mode trigger TIM3_ETR
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <TIM3_init+0x70>)
 8000860:	2276      	movs	r2, #118	; 0x76
 8000862:	609a      	str	r2, [r3, #8]
	WRITE_REG(TIM3->CR2, 0x10); //not sure?
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <TIM3_init+0x70>)
 8000866:	2210      	movs	r2, #16
 8000868:	605a      	str	r2, [r3, #4]
	WRITE_REG(TIM3->CCMR1, 0x78); //not sure?
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <TIM3_init+0x70>)
 800086c:	2278      	movs	r2, #120	; 0x78
 800086e:	619a      	str	r2, [r3, #24]
	WRITE_REG(TIM3->CCR1, 50U); //set pulse
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <TIM3_init+0x70>)
 8000872:	2232      	movs	r2, #50	; 0x32
 8000874:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	46020c00 	.word	0x46020c00
 8000884:	42021000 	.word	0x42021000
 8000888:	40000400 	.word	0x40000400

0800088c <NVIC_init>:

void NVIC_init() {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
	  uint32_t prioritygroup;
	  prioritygroup = NVIC_GetPriorityGrouping();
 8000892:	f7ff fcef 	bl	8000274 <__NVIC_GetPriorityGrouping>
 8000896:	6078      	str	r0, [r7, #4]
	  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(prioritygroup, 0, 0));
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff fd3f 	bl	8000320 <NVIC_EncodePriority>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4619      	mov	r1, r3
 80008a6:	200f      	movs	r0, #15
 80008a8:	f7ff fd10 	bl	80002cc <__NVIC_SetPriority>
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <SPI_init>:

void SPI_init() {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

	//set SPI1 clock source
	MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SPI1SEL, (uint32_t)(RCC_CCIPR1_SPI1SEL_0));
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <SPI_init+0x78>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80008c4:	4a19      	ldr	r2, [pc, #100]	; (800092c <SPI_init+0x78>)
 80008c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	//enable SPI1 clock source
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI1EN);
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <SPI_init+0x78>)
 80008d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80008d4:	4a15      	ldr	r2, [pc, #84]	; (800092c <SPI_init+0x78>)
 80008d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008da:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

	//Enable SPI1 interrupts
	uint32_t prioritygroup;
	prioritygroup = NVIC_GetPriorityGrouping();
 80008de:	f7ff fcc9 	bl	8000274 <__NVIC_GetPriorityGrouping>
 80008e2:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(prioritygroup, 0, 0));
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff fd19 	bl	8000320 <NVIC_EncodePriority>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4619      	mov	r1, r3
 80008f2:	203b      	movs	r0, #59	; 0x3b
 80008f4:	f7ff fcea 	bl	80002cc <__NVIC_SetPriority>
    NVIC_EnableIRQ(SPI1_IRQn);
 80008f8:	203b      	movs	r0, #59	; 0x3b
 80008fa:	f7ff fcc9 	bl	8000290 <__NVIC_EnableIRQ>

	//DISABLE SPI1 peripheral
	CLEAR_BIT(SPI1->CR1, SPI_CR1_SPE);
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <SPI_init+0x7c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a0b      	ldr	r2, [pc, #44]	; (8000930 <SPI_init+0x7c>)
 8000904:	f023 0301 	bic.w	r3, r3, #1
 8000908:	6013      	str	r3, [r2, #0]

	SET_BIT(SPI1->CR1, SPI_CR1_SSI);
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <SPI_init+0x7c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <SPI_init+0x7c>)
 8000910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000914:	6013      	str	r3, [r2, #0]

	//Configure SPI1 peripheral part 1
	WRITE_REG(SPI1->CFG1, (SPI_BAUDRATEPRESCALER_4 | 0x70000 | SPI_FIFO_THRESHOLD_03DATA | \
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <SPI_init+0x7c>)
 8000918:	4a06      	ldr	r2, [pc, #24]	; (8000934 <SPI_init+0x80>)
 800091a:	609a      	str	r2, [r3, #8]
			SPI_DATASIZE_32BIT ));

	//AFCTR= 1 or 0?
	//Configure SPI1 peripheral part 2
	WRITE_REG(SPI1->CFG2, SPI_POLARITY_LOW | SPI_PHASE_1EDGE | \
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <SPI_init+0x7c>)
 800091e:	4a06      	ldr	r2, [pc, #24]	; (8000938 <SPI_init+0x84>)
 8000920:	60da      	str	r2, [r3, #12]

	//WRITE_REG(SPI1->CFG2, 0x7460000);
	//WRITE_REG(SPI1->CFG2, 0x5440000);
	//SET_BIT(SPI1->IFCR, 0b1000000000);

}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	46020c00 	.word	0x46020c00
 8000930:	40013000 	.word	0x40013000
 8000934:	1007005f 	.word	0x1007005f
 8000938:	044420f0 	.word	0x044420f0

0800093c <CRC_init>:

void CRC_init() {
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_CRCEN);
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <CRC_init+0x30>)
 8000942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000946:	4a09      	ldr	r2, [pc, #36]	; (800096c <CRC_init+0x30>)
 8000948:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800094c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	WRITE_REG(CRC->CR, 0x10); //8bit CRC
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <CRC_init+0x34>)
 8000952:	2210      	movs	r2, #16
 8000954:	609a      	str	r2, [r3, #8]
	WRITE_REG(CRC->POL, 0x7); //polynomial
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <CRC_init+0x34>)
 8000958:	2207      	movs	r2, #7
 800095a:	615a      	str	r2, [r3, #20]
	WRITE_REG(CRC->INIT, 0x0); //initial value
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <CRC_init+0x34>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]

}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	46020c00 	.word	0x46020c00
 8000970:	40023000 	.word	0x40023000

08000974 <DMA_init>:

void DMA_init(uint8_t *ptrRxBuffer) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	; 0x38
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

	//enable GPDMA clock
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPDMA1EN);
 800097c:	4b42      	ldr	r3, [pc, #264]	; (8000a88 <DMA_init+0x114>)
 800097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000982:	4a41      	ldr	r2, [pc, #260]	; (8000a88 <DMA_init+0x114>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	//Enable GPDMA ch6 interrupts
	uint32_t prioritygroup;
	prioritygroup = NVIC_GetPriorityGrouping();
 800098c:	f7ff fc72 	bl	8000274 <__NVIC_GetPriorityGrouping>
 8000990:	6378      	str	r0, [r7, #52]	; 0x34
    NVIC_SetPriority(GPDMA1_Channel6_IRQn, NVIC_EncodePriority(prioritygroup, 0, 0));
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000998:	f7ff fcc2 	bl	8000320 <NVIC_EncodePriority>
 800099c:	4603      	mov	r3, r0
 800099e:	4619      	mov	r1, r3
 80009a0:	2023      	movs	r0, #35	; 0x23
 80009a2:	f7ff fc93 	bl	80002cc <__NVIC_SetPriority>
    NVIC_EnableIRQ(GPDMA1_Channel6_IRQn);
 80009a6:	2023      	movs	r0, #35	; 0x23
 80009a8:	f7ff fc72 	bl	8000290 <__NVIC_EnableIRQ>

    //disable DMA channel
    GPDMA1_Channel6->CCR |= (DMA_CCR_SUSP | DMA_CCR_RESET);
 80009ac:	4b37      	ldr	r3, [pc, #220]	; (8000a8c <DMA_init+0x118>)
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	4a36      	ldr	r2, [pc, #216]	; (8000a8c <DMA_init+0x118>)
 80009b2:	f043 0306 	orr.w	r3, r3, #6
 80009b6:	6153      	str	r3, [r2, #20]

    /* Check if the DMA channel is effectively disabled */
      while ((GPDMA1_Channel6->CCR & DMA_CCR_EN) != 0U)
 80009b8:	bf00      	nop
 80009ba:	4b34      	ldr	r3, [pc, #208]	; (8000a8c <DMA_init+0x118>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1f9      	bne.n	80009ba <DMA_init+0x46>
      {}

    //CCR
    uint32_t CCRreg;
    CCRreg = DMA_CCR_PRIO_1 | DMA_LSM_FULL_EXECUTION | 0x20000; //DMA_CCR_LAP == 0x2000
 80009c6:	f44f 0302 	mov.w	r3, #8519680	; 0x820000
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
    MODIFY_REG(GPDMA1_Channel6->CCR, (DMA_CCR_PRIO | 0x20000 | DMA_CCR_LSM), CCRreg); //DMA_CCR_LAP == 0x2000
 80009cc:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <DMA_init+0x118>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	f423 0243 	bic.w	r2, r3, #12779520	; 0xc30000
 80009d4:	492d      	ldr	r1, [pc, #180]	; (8000a8c <DMA_init+0x118>)
 80009d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d8:	4313      	orrs	r3, r2
 80009da:	614b      	str	r3, [r1, #20]


    //set transfer event mode
    WRITE_REG(GPDMA1_Channel6->CTR2, DMA_CTR2_TCEM);
 80009dc:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <DMA_init+0x118>)
 80009de:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80009e2:	645a      	str	r2, [r3, #68]	; 0x44

    WRITE_REG(GPDMA1_Channel6->CTR1, 0U);
 80009e4:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <DMA_init+0x118>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(GPDMA1_Channel6->CBR1, 0U);
 80009ea:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <DMA_init+0x118>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	649a      	str	r2, [r3, #72]	; 0x48
    WRITE_REG(GPDMA1_Channel6->CSAR, 0U);
 80009f0:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <DMA_init+0x118>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(GPDMA1_Channel6->CDAR, 0U);
 80009f6:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <DMA_init+0x118>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	651a      	str	r2, [r3, #80]	; 0x50
    WRITE_REG(GPDMA1_Channel6->CLLR, 0U);
 80009fc:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <DMA_init+0x118>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	67da      	str	r2, [r3, #124]	; 0x7c
    uint32_t LinkRegisters[8U];
    uint32_t CTR1_DBL;
    uint32_t CTR1_SBL;

    //configure Link Registers
    CTR1_DBL = (DestBurstLength - 1U) << 20U & 0x3f00000;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    CTR1_SBL = (SrcBurstLength - 1U) << 4U & 0x3f0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28

    LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = DMA_CTR1_DINC | DMA_DEST_DATAWIDTH_WORD |\
    		DMA_DATA_RIGHTALIGN_ZEROPADDED | DMA_SINC_FIXED | DMA_SRC_DATAWIDTH_WORD |\
			DMA_SRC_ALLOCATED_PORT0 | DMA_DEST_ALLOCATED_PORT0 | DMA_EXCHANGE_NONE |\
			CTR1_DBL | CTR1_SBL;
 8000a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000a14:	f043 0302 	orr.w	r3, r3, #2
    LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = DMA_CTR1_DINC | DMA_DEST_DATAWIDTH_WORD |\
 8000a18:	60bb      	str	r3, [r7, #8]
    LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = DMA_TCEM_BLOCK_TRANSFER | GPDMA1_REQUEST_SPI1_RX;
 8000a1a:	2306      	movs	r3, #6
 8000a1c:	60fb      	str	r3, [r7, #12]
    LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = Size*4;
 8000a1e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000a22:	613b      	str	r3, [r7, #16]
    LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&SPI1->RXDR;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <DMA_init+0x11c>)
 8000a26:	617b      	str	r3, [r7, #20]
    LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)ptrRxBuffer;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	61bb      	str	r3, [r7, #24]
    LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
	LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
	LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24

    SET_BIT(GPDMA1_Channel6->CCR, DMA_CCR_TCIE | DMA_CCR_HTIE | DMA_CCR_DTEIE |\
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <DMA_init+0x118>)
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <DMA_init+0x118>)
 8000a3e:	f443 43be 	orr.w	r3, r3, #24320	; 0x5f00
 8000a42:	6153      	str	r3, [r2, #20]
    		DMA_CCR_ULEIE | DMA_CCR_USEIE | DMA_CCR_TOIE);

    //point CLBAR and CLLR to Link Registers
    GPDMA1_Channel6->CLBAR = (uint32_t)LinkRegisters & DMA_CLBAR_LBA;
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <DMA_init+0x118>)
 8000a4a:	0c1b      	lsrs	r3, r3, #16
 8000a4c:	041b      	lsls	r3, r3, #16
 8000a4e:	6013      	str	r3, [r2, #0]
    GPDMA1_Channel6->CLLR = ((uint32_t)LinkRegisters & DMA_CLLR_LA) | DMA_CLLR_UT1 |\
 8000a50:	f107 0208 	add.w	r2, r7, #8
 8000a54:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000a58:	4013      	ands	r3, r2
 8000a5a:	4a0c      	ldr	r2, [pc, #48]	; (8000a8c <DMA_init+0x118>)
    		DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8000a5c:	f043 4378 	orr.w	r3, r3, #4160749568	; 0xf8000000
 8000a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    GPDMA1_Channel6->CLLR = ((uint32_t)LinkRegisters & DMA_CLLR_LA) | DMA_CLLR_UT1 |\
 8000a64:	67d3      	str	r3, [r2, #124]	; 0x7c

    SET_BIT(GPDMA1_Channel6->CCR, DMA_CCR_EN );
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <DMA_init+0x118>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <DMA_init+0x118>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6153      	str	r3, [r2, #20]

    SET_BIT(SPI1->CFG1, SPI_CFG1_RXDMAEN);
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <DMA_init+0x120>)
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <DMA_init+0x120>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7c:	6093      	str	r3, [r2, #8]

}
 8000a7e:	bf00      	nop
 8000a80:	3738      	adds	r7, #56	; 0x38
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	46020c00 	.word	0x46020c00
 8000a8c:	40020350 	.word	0x40020350
 8000a90:	40013030 	.word	0x40013030
 8000a94:	40013000 	.word	0x40013000

08000a98 <USART_init>:

void USART_init(void){
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

	//set clock source
	MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_USART1SEL, 0U); // RCC_USART1CLKSOURCE_PCLK2
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <USART_init+0x98>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a23      	ldr	r2, [pc, #140]	; (8000b30 <USART_init+0x98>)
 8000aa4:	f023 0303 	bic.w	r3, r3, #3
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	//enable USART clock
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN);
 8000aac:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <USART_init+0x98>)
 8000aae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000ab2:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <USART_init+0x98>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

	//disable USUART
	CLEAR_BIT(USART1->CR1, USART_CR1_UE);
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <USART_init+0x9c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <USART_init+0x9c>)
 8000ac2:	f023 0301 	bic.w	r3, r3, #1
 8000ac6:	6013      	str	r3, [r2, #0]

	//receive and transmit enable
	MODIFY_REG(USART1->CR1, USART_CR1_FIELDS, 0xC);
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <USART_init+0x9c>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <USART_init+0xa0>)
 8000ace:	4013      	ands	r3, r2
 8000ad0:	4a18      	ldr	r2, [pc, #96]	; (8000b34 <USART_init+0x9c>)
 8000ad2:	f043 030c 	orr.w	r3, r3, #12
 8000ad6:	6013      	str	r3, [r2, #0]

	//set baud rate
	WRITE_REG(USART1->BRR, 94U); //   ( 160,000,000Hz + Baud / 2 ) / Baud
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <USART_init+0x9c>)
 8000ada:	225e      	movs	r2, #94	; 0x5e
 8000adc:	60da      	str	r2, [r3, #12]

	/* In asynchronous mode, the following bits must be kept cleared:
	  - LINEN and CLKEN bits in the USART_CR2 register,
	  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(USART1->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <USART_init+0x9c>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <USART_init+0x9c>)
 8000ae4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000ae8:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(USART1->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <USART_init+0x9c>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	4a11      	ldr	r2, [pc, #68]	; (8000b34 <USART_init+0x9c>)
 8000af0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8000af4:	6093      	str	r3, [r2, #8]

	//enable USUART
	SET_BIT(USART1->CR1, USART_CR1_UE);
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <USART_init+0x9c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <USART_init+0x9c>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6013      	str	r3, [r2, #0]

	while (READ_BIT(USART1->ISR, USART_ISR_TEACK) != USART_ISR_TEACK)
 8000b02:	bf00      	nop
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <USART_init+0x9c>)
 8000b06:	69db      	ldr	r3, [r3, #28]
 8000b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000b10:	d1f8      	bne.n	8000b04 <USART_init+0x6c>
	{}

	while (READ_BIT(USART1->ISR, USART_ISR_REACK) != USART_ISR_REACK)
 8000b12:	bf00      	nop
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <USART_init+0x9c>)
 8000b16:	69db      	ldr	r3, [r3, #28]
 8000b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b20:	d1f8      	bne.n	8000b14 <USART_init+0x7c>
	{}

}
 8000b22:	bf00      	nop
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	46020c00 	.word	0x46020c00
 8000b34:	40013800 	.word	0x40013800
 8000b38:	cfff69f3 	.word	0xcfff69f3

08000b3c <main>:

int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0

	system_clk_init();
 8000b42:	f7ff fc21 	bl	8000388 <system_clk_init>
	GPIO_init();
 8000b46:	f7ff fd79 	bl	800063c <GPIO_init>
	USART_init();
 8000b4a:	f7ff ffa5 	bl	8000a98 <USART_init>
	TIM3_init();
 8000b4e:	f7ff fe63 	bl	8000818 <TIM3_init>
	NVIC_init();
 8000b52:	f7ff fe9b 	bl	800088c <NVIC_init>
	SPI_init();
 8000b56:	f7ff fead 	bl	80008b4 <SPI_init>
	DMA_init((uint8_t *)RxBuffer);
 8000b5a:	4816      	ldr	r0, [pc, #88]	; (8000bb4 <main+0x78>)
 8000b5c:	f7ff ff0a 	bl	8000974 <DMA_init>
	CRC_init();
 8000b60:	f7ff feec 	bl	800093c <CRC_init>

/*	while ((GPIOA->IDR & 0b10000) != 0b10000) {

	}*/
	TIM3->CCER = 0x11; //compare 1 output enable
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <main+0x7c>)
 8000b66:	2211      	movs	r2, #17
 8000b68:	621a      	str	r2, [r3, #32]

	//Set xfer size
	MODIFY_REG(SPI1->CR2, SPI_CR2_TSIZE, Size);
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <main+0x80>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	0c1b      	lsrs	r3, r3, #16
 8000b70:	041b      	lsls	r3, r3, #16
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <main+0x80>)
 8000b74:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 8000b78:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 8000b7c:	6053      	str	r3, [r2, #4]

	//Enable SPI interrupts
	WRITE_REG(SPI1->IER, (SPI_IER_EOTIE  |  SPI_IER_OVRIE | SPI_IER_UDRIE | SPI_IER_TIFREIE | SPI_IER_MODFIE));
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <main+0x80>)
 8000b80:	f44f 725a 	mov.w	r2, #872	; 0x368
 8000b84:	611a      	str	r2, [r3, #16]

	//Enable SPI1 peripheral
	SET_BIT(SPI1->CR1, SPI_CR1_SPE);
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <main+0x80>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <main+0x80>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6013      	str	r3, [r2, #0]

	//pause
	uint32_t count = 16000000;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <main+0x84>)
 8000b94:	607b      	str	r3, [r7, #4]
	while (count > 0U) {
 8000b96:	e003      	b.n	8000ba0 <main+0x64>
	asm("NOP");
 8000b98:	bf00      	nop
	count--;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	607b      	str	r3, [r7, #4]
	while (count > 0U) {
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1f8      	bne.n	8000b98 <main+0x5c>
	}


	//Master transfer start
	SET_BIT(SPI1->CR1, SPI_CR1_CSTART);
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <main+0x80>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <main+0x80>)
 8000bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb0:	6013      	str	r3, [r2, #0]




    /* Loop forever */
	for(;;);
 8000bb2:	e7fe      	b.n	8000bb2 <main+0x76>
 8000bb4:	20000020 	.word	0x20000020
 8000bb8:	40000400 	.word	0x40000400
 8000bbc:	40013000 	.word	0x40013000
 8000bc0:	00f42400 	.word	0x00f42400

08000bc4 <EXTI4_IRQHandler>:
}


void EXTI4_IRQHandler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

	//Clear EXTI4 interrupt
	EXTI->FPR1 = (0x10);
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <EXTI4_IRQHandler+0x14>)
 8000bca:	2210      	movs	r2, #16
 8000bcc:	611a      	str	r2, [r3, #16]



}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	46022000 	.word	0x46022000

08000bdc <SPI1_IRQHandler>:


void SPI1_IRQHandler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
		//Disable SPI1 peripheral
		//CLEAR_BIT(SPI1->CR1, SPI_CR1_SPE);

		//NVIC_EnableIRQ(EXTI4_IRQn);
	}*/
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <GPDMA1_CH6_IRQHandler>:

void GPDMA1_CH6_IRQHandler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
	if (READ_BIT(GPDMA1_Channel6->CSR, DMA_FLAG_TC) != DMA_FLAG_TC) {
 8000bf2:	4b38      	ldr	r3, [pc, #224]	; (8000cd4 <GPDMA1_CH6_IRQHandler+0xe8>)
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bfe:	d162      	bne.n	8000cc6 <GPDMA1_CH6_IRQHandler+0xda>
		return;
	}

	//clear interrupt flags
	WRITE_REG(GPDMA1_Channel6->CFCR, (DMA_FLAG_TC | DMA_FLAG_HT));
 8000c00:	4b34      	ldr	r3, [pc, #208]	; (8000cd4 <GPDMA1_CH6_IRQHandler+0xe8>)
 8000c02:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c06:	60da      	str	r2, [r3, #12]

	uint16_t count = 65532;
 8000c08:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000c0c:	80fb      	strh	r3, [r7, #6]
	uint8_t *pdata8bits = (uint8_t *)RxBuffer;
 8000c0e:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <GPDMA1_CH6_IRQHandler+0xec>)
 8000c10:	603b      	str	r3, [r7, #0]

	while (count > 0U) {
 8000c12:	e02f      	b.n	8000c74 <GPDMA1_CH6_IRQHandler+0x88>

		if (count % 4 == 0) {
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	f003 0303 	and.w	r3, r3, #3
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d118      	bne.n	8000c52 <GPDMA1_CH6_IRQHandler+0x66>
			WRITE_REG(CRC->DR, (uint32_t)(*pdata8bits & 0xFFU) << 8*3 |\
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	061a      	lsls	r2, r3, #24
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	041b      	lsls	r3, r3, #16
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	3302      	adds	r3, #2
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	021b      	lsls	r3, r3, #8
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	3203      	adds	r2, #3
 8000c3e:	7812      	ldrb	r2, [r2, #0]
 8000c40:	4611      	mov	r1, r2
 8000c42:	4a26      	ldr	r2, [pc, #152]	; (8000cdc <GPDMA1_CH6_IRQHandler+0xf0>)
 8000c44:	430b      	orrs	r3, r1
 8000c46:	6013      	str	r3, [r2, #0]
					(uint32_t)(*(pdata8bits + 1) & 0xFFU) <<8*2 |\
					(uint32_t)(*(pdata8bits + 2) & 0xFFU) <<8 |\
					(uint32_t)(*(pdata8bits + 3) & 0xFFU));
			*pdata8bits = (uint8_t)READ_REG(CRC->DR);
 8000c48:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <GPDMA1_CH6_IRQHandler+0xf0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	701a      	strb	r2, [r3, #0]
		}

		while (READ_BIT(USART1->ISR, UART_FLAG_TXE) != UART_FLAG_TXE)
 8000c52:	bf00      	nop
 8000c54:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <GPDMA1_CH6_IRQHandler+0xf4>)
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5c:	2b80      	cmp	r3, #128	; 0x80
 8000c5e:	d1f9      	bne.n	8000c54 <GPDMA1_CH6_IRQHandler+0x68>
			{}

		WRITE_REG(USART1->TDR, (uint8_t)(*pdata8bits & 0xFFU));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	781a      	ldrb	r2, [r3, #0]
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <GPDMA1_CH6_IRQHandler+0xf4>)
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
		pdata8bits++;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	603b      	str	r3, [r7, #0]
		count--;
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	80fb      	strh	r3, [r7, #6]
	while (count > 0U) {
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1cc      	bne.n	8000c14 <GPDMA1_CH6_IRQHandler+0x28>
		}

	while (READ_BIT(USART1->ISR, UART_FLAG_TC) != UART_FLAG_TC)
 8000c7a:	bf00      	nop
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <GPDMA1_CH6_IRQHandler+0xf4>)
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c84:	2b40      	cmp	r3, #64	; 0x40
 8000c86:	d1f9      	bne.n	8000c7c <GPDMA1_CH6_IRQHandler+0x90>
	{}


	if ((SPI1->SR & SPI_IER_EOTIE) == SPI_IER_EOTIE) { //EOT set
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <GPDMA1_CH6_IRQHandler+0xf8>)
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	f003 0308 	and.w	r3, r3, #8
 8000c90:	2b08      	cmp	r3, #8
 8000c92:	d119      	bne.n	8000cc8 <GPDMA1_CH6_IRQHandler+0xdc>

		//clear EOT and TXTF interrupt flags
		SET_BIT(SPI1->IFCR, SPI_IFCR_EOTC);
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <GPDMA1_CH6_IRQHandler+0xf8>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <GPDMA1_CH6_IRQHandler+0xf8>)
 8000c9a:	f043 0308 	orr.w	r3, r3, #8
 8000c9e:	6193      	str	r3, [r2, #24]
		SET_BIT(SPI1->IFCR, SPI_IFCR_TXTFC);
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <GPDMA1_CH6_IRQHandler+0xf8>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a0f      	ldr	r2, [pc, #60]	; (8000ce4 <GPDMA1_CH6_IRQHandler+0xf8>)
 8000ca6:	f043 0310 	orr.w	r3, r3, #16
 8000caa:	6193      	str	r3, [r2, #24]

	    SET_BIT(GPDMA1_Channel6->CCR, DMA_CCR_EN );
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <GPDMA1_CH6_IRQHandler+0xe8>)
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <GPDMA1_CH6_IRQHandler+0xe8>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6153      	str	r3, [r2, #20]

		//Master transfer start
		SET_BIT(SPI1->CR1, SPI_CR1_CSTART);
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <GPDMA1_CH6_IRQHandler+0xf8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <GPDMA1_CH6_IRQHandler+0xf8>)
 8000cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	e000      	b.n	8000cc8 <GPDMA1_CH6_IRQHandler+0xdc>
		return;
 8000cc6:	bf00      	nop
	}
}
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40020350 	.word	0x40020350
 8000cd8:	20000020 	.word	0x20000020
 8000cdc:	40023000 	.word	0x40023000
 8000ce0:	40013800 	.word	0x40013800
 8000ce4:	40013000 	.word	0x40013000

08000ce8 <HardFault_Handler>:


void HardFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <HardFault_Handler+0x4>

08000cee <NMI_Handler>:
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

void NMI_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <NMI_Handler+0x4>

08000cf4 <MemManage_Handler>:
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>
	...

08000d08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d0c:	e000      	b.n	8000d10 <Reset_Handler+0x8>
 8000d0e:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	; (8000d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <LoopForever+0xe>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	; (8000d54 <LoopForever+0x16>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d36:	f000 f811 	bl	8000d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d3a:	f7ff feff 	bl	8000b3c <main>

08000d3e <LoopForever>:

LoopForever:
    b LoopForever
 8000d3e:	e7fe      	b.n	8000d3e <LoopForever>
  ldr   r0, =_estack
 8000d40:	200c0000 	.word	0x200c0000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d4c:	08000dc4 	.word	0x08000dc4
  ldr r2, =_sbss
 8000d50:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d54:	2001001c 	.word	0x2001001c

08000d58 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC1_IRQHandler>
	...

08000d5c <__libc_init_array>:
 8000d5c:	b570      	push	{r4, r5, r6, lr}
 8000d5e:	4d0d      	ldr	r5, [pc, #52]	; (8000d94 <__libc_init_array+0x38>)
 8000d60:	2600      	movs	r6, #0
 8000d62:	4c0d      	ldr	r4, [pc, #52]	; (8000d98 <__libc_init_array+0x3c>)
 8000d64:	1b64      	subs	r4, r4, r5
 8000d66:	10a4      	asrs	r4, r4, #2
 8000d68:	42a6      	cmp	r6, r4
 8000d6a:	d109      	bne.n	8000d80 <__libc_init_array+0x24>
 8000d6c:	4d0b      	ldr	r5, [pc, #44]	; (8000d9c <__libc_init_array+0x40>)
 8000d6e:	2600      	movs	r6, #0
 8000d70:	4c0b      	ldr	r4, [pc, #44]	; (8000da0 <__libc_init_array+0x44>)
 8000d72:	f000 f817 	bl	8000da4 <_init>
 8000d76:	1b64      	subs	r4, r4, r5
 8000d78:	10a4      	asrs	r4, r4, #2
 8000d7a:	42a6      	cmp	r6, r4
 8000d7c:	d105      	bne.n	8000d8a <__libc_init_array+0x2e>
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
 8000d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d84:	3601      	adds	r6, #1
 8000d86:	4798      	blx	r3
 8000d88:	e7ee      	b.n	8000d68 <__libc_init_array+0xc>
 8000d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d8e:	3601      	adds	r6, #1
 8000d90:	4798      	blx	r3
 8000d92:	e7f2      	b.n	8000d7a <__libc_init_array+0x1e>
 8000d94:	08000dbc 	.word	0x08000dbc
 8000d98:	08000dbc 	.word	0x08000dbc
 8000d9c:	08000dbc 	.word	0x08000dbc
 8000da0:	08000dc0 	.word	0x08000dc0

08000da4 <_init>:
 8000da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da6:	bf00      	nop
 8000da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000daa:	bc08      	pop	{r3}
 8000dac:	469e      	mov	lr, r3
 8000dae:	4770      	bx	lr

08000db0 <_fini>:
 8000db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db2:	bf00      	nop
 8000db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000db6:	bc08      	pop	{r3}
 8000db8:	469e      	mov	lr, r3
 8000dba:	4770      	bx	lr
